CREATE TYPE user_status AS ENUM ('active', 'not verified', 'deleted', 'blocked');

CREATE TABLE users (
    userid SERIAL PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(255) DEFAULT 'user',
    status user_status NOT NULL DEFAULT 'not verified',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_profiles (
    user_id INTEGER PRIMARY KEY REFERENCES users(userid) ON DELETE CASCADE,
    image_url TEXT,
    gender VARCHAR(10) NOT NULL,
    date_of_birth DATE NOT NULL,
    current_weight NUMERIC(5,2) NOT NULL,
    current_height NUMERIC(5,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    goal VARCHAR(100),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE weight_history (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(userid) ON DELETE CASCADE,
    weight NUMERIC(5,2) NOT NULL,
    measured_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE height_history (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(userid) ON DELETE CASCADE,
    height NUMERIC(5,2) NOT NULL,
    measured_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Trigger to insert height and weight history
CREATE OR REPLACE FUNCTION insert_history_on_update() 
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.current_height <> OLD.current_height THEN
        INSERT INTO height_history (user_id, height, measured_at)
        VALUES (NEW.user_id, NEW.current_height, CURRENT_TIMESTAMP);
    END IF;

    IF NEW.current_weight <> OLD.current_weight THEN
        INSERT INTO weight_history (user_id, weight, measured_at)
        VALUES (NEW.user_id, NEW.current_weight, CURRENT_TIMESTAMP);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_user_profiles_history
AFTER UPDATE ON user_profiles
FOR EACH ROW
EXECUTE FUNCTION insert_history_on_update();

-- Trigger to update `updated_at` timestamp
CREATE OR REPLACE FUNCTION update_user_profile_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_updated_at
BEFORE UPDATE ON user_profiles
FOR EACH ROW
EXECUTE FUNCTION update_user_profile_timestamp();


CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(100),
    duration INT NOT NULL, -- in minutes
    difficulty VARCHAR(50),
    calories_burned NUMERIC(6,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE exercises (
    exercise_id SERIAL PRIMARY KEY,
    workout_id INTEGER REFERENCES workouts(workout_id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    muscle_group VARCHAR(100),
    sets INT NOT NULL,
    reps INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE meals (
    meal_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(userid) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    calories NUMERIC(6,2) NOT NULL,
    protein NUMERIC(6,2),
    fat NUMERIC(6,2),
    carbs NUMERIC(6,2),
    meal_type VARCHAR(50) NOT NULL, -- e.g., breakfast, lunch, dinner, snack
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Automatically log when a meal is created
CREATE OR REPLACE FUNCTION log_meal_creation()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO activity_log (user_id, action, timestamp)
    VALUES (NEW.user_id, 'Meal Logged', CURRENT_TIMESTAMP);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER meal_creation_log
AFTER INSERT ON meals
FOR EACH ROW
EXECUTE FUNCTION log_meal_creation();


CREATE TABLE progress_tracking (
    progress_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(userid) ON DELETE CASCADE,
    weight NUMERIC(5,2),
    height NUMERIC(5,2),
    body_fat_percentage NUMERIC(5,2),
    BMI NUMERIC(5,2),
    muscle_mass NUMERIC(5,2),
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Automatically calculate BMI when progress is added
CREATE OR REPLACE FUNCTION calculate_BMI()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.height > 0 THEN
        NEW.BMI = NEW.weight / (NEW.height * NEW.height);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_BMI_on_insert
BEFORE INSERT ON progress_tracking
FOR EACH ROW
EXECUTE FUNCTION calculate_BMI();


CREATE TABLE notifications (
    notification_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(userid) ON DELETE CASCADE,
    message TEXT NOT NULL,
    action VARCHAR(100), -- e.g., "goal updated", "workout completed"
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    read BOOLEAN DEFAULT FALSE
);

-- Automatically mark notifications as read after 7 days
CREATE OR REPLACE FUNCTION mark_notifications_read()
RETURNS TRIGGER AS $$
BEGIN
    IF (NEW.created_at < (CURRENT_TIMESTAMP - INTERVAL '7 days')) THEN
        NEW.read = TRUE;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER auto_mark_notifications_read
BEFORE UPDATE ON notifications
FOR EACH ROW
EXECUTE FUNCTION mark_notifications_read();


CREATE TABLE activity_log (
    log_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(userid) ON DELETE CASCADE,
    action VARCHAR(255) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE audit_logs (
    log_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(userid) ON DELETE CASCADE,
    action VARCHAR(255) NOT NULL,
    details JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Automatically log changes to any user profile
CREATE OR REPLACE FUNCTION log_user_profile_changes()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO audit_logs (user_id, action, details, created_at)
    VALUES (NEW.user_id, 'Profile Updated', row_to_json(NEW), CURRENT_TIMESTAMP);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER log_profile_updates
AFTER UPDATE ON user_profiles
FOR EACH ROW
EXECUTE FUNCTION log_user_profile_changes();


CREATE TABLE user_workout_plans (
    user_plan_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(userid) ON DELETE CASCADE,
    workout_id INTEGER REFERENCES workouts(workout_id) ON DELETE CASCADE,
    description TEXT,
    start_date DATE NOT NULL,
    end_date DATE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_workout_logs (
    log_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(userid) ON DELETE CASCADE,
    workout_id INTEGER REFERENCES workouts(workout_id) ON DELETE CASCADE,
    performed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    duration INT, -- Duration in minutes
    calories_burned NUMERIC(6,2),
    notes TEXT
);

CREATE TABLE user_exercise_logs (
    exercise_log_id SERIAL PRIMARY KEY,
    user_workout_log_id INTEGER REFERENCES user_workout_logs(log_id) ON DELETE CASCADE,
    exercise_id INTEGER REFERENCES exercises(exercise_id) ON DELETE CASCADE,
    sets_completed INT NOT NULL,
    reps_performed INT NOT NULL,
    weight_used NUMERIC(6,2), -- Optional, e.g., in kg or lbs
    notes TEXT
);


INSERT INTO workouts (name, category, duration, difficulty, calories_burned)
VALUES 
('Morning Yoga', 'Flexibility', 30, 'Beginner', 150.50),
('HIIT Session', 'Cardio', 45, 'Advanced', 500.00),
('Strength Training', 'Strength', 60, 'Intermediate', 400.00),
('Cycling', 'Endurance', 90, 'Intermediate', 750.25),
('Pilates Core', 'Core', 40, 'Beginner', 200.75),
('Trail Run', 'Outdoor', 120, 'Advanced', 900.00),
('Zumba Dance', 'Cardio', 50, 'Beginner', 350.50),
('CrossFit WOD', 'CrossFit', 60, 'Advanced', 600.00),
('Swimming Laps', 'Endurance', 45, 'Intermediate', 500.00),
('Boxing Workout', 'Strength', 60, 'Intermediate', 550.25),
('Power Yoga', 'Flexibility', 35, 'Intermediate', 180.75),
('Rowing Machine', 'Cardio', 40, 'Intermediate', 300.00),
('Rock Climbing', 'Outdoor', 90, 'Advanced', 800.50),
('Barre Workout', 'Flexibility', 50, 'Beginner', 250.00),
('Sprint Intervals', 'Cardio', 20, 'Advanced', 400.00),
('Hiking', 'Outdoor', 180, 'Intermediate', 1200.75),
('Bodyweight Circuit', 'Strength', 30, 'Beginner', 250.00),
('Functional Fitness', 'CrossFit', 60, 'Intermediate', 550.00),
('Aqua Aerobics', 'Endurance', 45, 'Beginner', 300.25),
('Kickboxing', 'Cardio', 60, 'Advanced', 700.00);


INSERT INTO exercises (workout_id, name, muscle_group, sets, reps)
VALUES 
(1, 'Downward Dog', 'Full Body', 3, 10),
(1, 'Warrior Pose', 'Legs', 3, 8),
(1, 'Tree Pose', 'Core', 3, 10),
(2, 'Burpees', 'Full Body', 5, 12),
(2, 'Mountain Climbers', 'Core', 4, 20),
(2, 'Jump Squats', 'Legs', 4, 15),
(3, 'Bench Press', 'Chest', 4, 10),
(3, 'Bicep Curls', 'Arms', 4, 12),
(3, 'Shoulder Press', 'Shoulders', 3, 10),
(4, 'Cycling Warm-Up', 'Legs', 1, 5),
(4, 'Endurance Sprints', 'Cardio', 3, 12),
(4, 'Cool Down Pedaling', 'Legs', 2, 10),
(5, 'Roll-Ups', 'Core', 4, 12),
(5, 'Side-Lying Leg Circles', 'Legs', 3, 15),
(5, 'Plank Hold', 'Core', 3, 30),
(6, 'Hill Sprints', 'Legs', 5, 8),
(6, 'Trail Jogging', 'Cardio', 1, 20),
(6, 'Lunges', 'Legs', 3, 12),
(7, 'Step Touch', 'Full Body', 3, 15),
(7, 'Grapevine Steps', 'Legs', 4, 12),
(7, 'Hip Rolls', 'Core', 3, 10),
(8, 'Deadlifts', 'Back', 4, 10),
(8, 'Kettlebell Swings', 'Core', 3, 15),
(8, 'Box Jumps', 'Legs', 5, 12),
(9, 'Front Crawl', 'Full Body', 4, 20),
(9, 'Butterfly Stroke', 'Arms', 3, 15),
(9, 'Treading Water', 'Legs', 2, 10),
(10, 'Jab-Cross Combo', 'Arms', 5, 20),
(10, 'Uppercuts', 'Arms', 4, 15),
(10, 'Hooks', 'Shoulders', 4, 12),
(11, 'Sun Salutations', 'Full Body', 3, 10),
(11, 'Chair Pose', 'Legs', 3, 12),
(11, 'Cobra Stretch', 'Back', 3, 8),
(12, 'Rowing Intervals', 'Back', 5, 12),
(12, 'High Knees', 'Legs', 4, 20),
(12, 'Cool Down Stretch', 'Full Body', 3, 10),
(13, 'Top Rope Climbing', 'Arms', 4, 10),
(13, 'Bouldering', 'Full Body', 3, 12),
(13, 'Grip Strengthening', 'Arms', 3, 15),
(14, 'Barre Squats', 'Legs', 4, 12),
(14, 'Arm Pulses', 'Arms', 3, 20),
(14, 'Calf Raises', 'Legs', 3, 15),
(15, 'Sprint Intervals', 'Legs', 6, 10),
(15, 'Speed Skaters', 'Legs', 4, 15),
(15, 'Cool Down Walk', 'Full Body', 1, 10),
(16, 'Uphill Trek', 'Legs', 1, 60),
(16, 'Trail Planks', 'Core', 3, 10),
(16, 'Cool Down Stretch', 'Full Body', 2, 10),
(17, 'Push-Ups', 'Chest', 4, 15),
(17, 'Tricep Dips', 'Arms', 3, 12),
(17, 'Jumping Jacks', 'Cardio', 4, 20),
(18, 'Medicine Ball Slams', 'Core', 3, 12),
(18, 'Pull-Ups', 'Back', 4, 8),
(18, 'Plank Rows', 'Core', 3, 10),
(19, 'Water Jogging', 'Legs', 4, 12),
(19, 'Flutter Kicks', 'Core', 3, 15),
(19, 'Aqua Push-Ups', 'Arms', 3, 10),
(20, 'Power Punches', 'Arms', 4, 15),
(20, 'Lunges with Twists', 'Legs', 3, 12),
(20, 'Jump Ropes', 'Cardio', 5, 20);
